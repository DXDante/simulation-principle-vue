// 节点对比
//      ┏━━━━━━━━━━━┓
// A  B ┃C  D  E   ┃ F  G  旧
// A  B ┃E  C  D  H┃ F  G  新
//      ┗━━━━━━━━━━━┛
//           ∨
//  C    D    E          2, 3, 4                    索引
// [0]  [1]  [2]
//  E    C    D    H     4, 2, 3, 0(表示以前不存在)   索引
//
// 
// [C, D]
// [0, 1] 通过上面的两个序列, 可以求出来, 最终这样的结果, 就可以保证某些元素不用移动
//
//
// 需要求 "最长递增子序列"
// 贪心算法 + 二分查找
// 贪心表示更有潜力值, 从最小开始连续, 因为后面还可以放更大的
//
//
//    2   3   7   6   8   4   9   11            ->  求连续性最长子序列个数
//   [0] [1] [2] [3] [4] [5] [6] [7]
//
// 0│ 2
// 1│ 2   3                                     3 比 2 大可放入
// 2│ 2   3   7
// 3│ 2   3   6                                 6 替换 7, 替换前是最后1个 (6 比 7 小, 6 后面可以放还可以放 7, 所以 236 比 237 连续性更好)
// 4│ 2   3   6   8                       
// 5│ 2   3   4   8                             4 替换 6, 8 之前是 6
// 6│ 2   3   4   8   9                   
// 7│ 2   3   4   8   9   11                    个数为 6 个
//
//
// 源 2   3   1   5   6   8   7   9   4
//   [0] [1] [2] [3] [4] [5] [6] [7] [8]
// 0│ 2                                         (2 的前一个是 null)
// 1│ 2   3                                     (3 的前一个是 2)
// 2│ 1   3                                     (1 的前一个是 null, 1 替换了 2)
// 3│ 1   3   5                                 (5 的前一个是 3)
// 4│ 1   3   5   6                             (6 的前一个是 5)
// 5│ 1   3   5   6   8                         (8 的前一个是 6)
// 6│ 1   3   5   6   7                         (7 的前一个是 6, 7 替换了 8)
// 7│ 1   3   5   6   7   9                     (9 的前一个是 7)
// 8│ 1   3   4   6   7   9                     (4 的前一个是 3, 4 替换了 5)
// ---------------------------------------------------------------------------------------------------------------------------------------------------------
//    1   3   4   6   7   9                     个数为 6 个, 虽然是无序的, 但是通过以下方法可以追溯
// 反向追溯(最后一个开始, 因为是最大的, 即 9, 表里找 9 的前一个 是 7, 得到 9 7, 又从 7 开始找前一个, 是 6, 得到 9 7 6, 那么 6 的前一个是 5, 得到 9 7 6 5, ..依次类推.., 结果顺序倒序看 <--)
//    9   7   6   5   3   2   ==就是=>   2   3   5   6   7   9
// 结果对应 源, 就是连续性最长的序列: 2   3   5   6   7   9
//            1          8           4
// *  2   3      5   6       7   9
// 对应的索引是不是: 0, 1, 3, 4, 6, 7 ???